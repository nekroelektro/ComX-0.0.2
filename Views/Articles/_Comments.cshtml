@using ComX_0._0._2.Helpers
@model ComX_0._0._2.Models.Comments
@{
    var articleHelper = new ArticleHelper();
    var userHelper = new UserHelper();
    var generalHelper = new GeneralHelper();
    var artId = Guid.Empty;
    try {
        artId = generalHelper.GetIdFromCurrentUrlForArticle();
    }catch {
        artId = ViewBag.ReturnArticleId;
    }
    var commentList = articleHelper.GetCommentsByArticle(artId);
}
<div class="commentSection">
    <div class="addComment">
        @if (!string.IsNullOrEmpty(User.Identity.Name))
        {
            if (!userHelper.GetCurrentUserProfileInfo().IsBlocked)
            {
                <h3>Napisz komentarz trzęsityłku:</h3>
                //using (Html.BeginForm())
                using (Ajax.BeginForm("_Comments", new AjaxOptions { UpdateTargetId = "detailsCommentSection" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="newCommentSection">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <div class="col-xs-12 center-block" style="display: inline-block;">
                                    @Html.Custom_DivFor(model => model.Body, "form-control articleEditorTextArea")
                                    @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            @Html.ValidationMessage("EmptyComment", new { @style = "color: red" })
                            @Html.ValidationMessage("TwoComments", new { @style = "color: red" })
                            @*@Html.HiddenFor(x=>x.ArticleId, new {@class = "commentAddFormArtId"})*@
                            <input style="display: none;" type="text" class="commentAddFormArtId" name="articleId" value="@artId" />
                            <div class="form-group">
                                <div style="padding-left: 2.2em;">
                                    <button type="submit" class="btn btn-info addCommentButton">
                                        <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Dodaj komentarz!
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>
    <hr />
    <h3>Komentarze(@commentList.Count)</h3>
    <div class="addedCommentsSection col-xs-12" style="padding-bottom: 4em;" id="commentSection">
        @if (commentList != null)
        {
            foreach (var item in commentList)
            {
                var currentUser = userHelper.GetUserById(item.UserId);
                <div class="singleCommentSection col-xs-11 col-xs-offset-1">
                    <div class="col-xs-2 commentFooter" style="height: 100%; color: black; padding-right: 0;">
                        @*@if (!string.IsNullOrEmpty(User.Identity.Name)) {*@
                            @if (userHelper.GetAvatarByUserId(new Guid(currentUser.Id)) != null) {
                                 <img src='@Url.Action("GetAvatar", "Account", new {userId = item.UserId})' style="max-width: 100%; text-align: center; margin: 0 auto;"/>
                             }
                        @*}*@
                    </div>
                    <div class="col-xs-9 commentBody" style="height: 100%; max-width: 100%;">
                        <div class="readyCommentDetails" style="width: 100%; border-bottom: solid 1px black; display: inline-block;">
                            <div style="float: left;">
                                <span class="glyphicon glyphicon-user" aria-hidden="true"></span> @currentUser.UserName &nbsp;&nbsp;&nbsp;&nbsp;
                                <span class="glyphicon glyphicon-time" aria-hidden="true"></span> @item.DateOfCreation.ToString()
                            </div>
                            @if (userHelper.UserIsAdmin(userHelper.GetCurrentLoggedUserId()) || item.UserId == userHelper.GetCurrentLoggedUserId()) {
                                <div style="float: right;">
                                    <a href='@Url.Action("CommentEdit", "Articles", new {id = item.Id, artId = item.ArticleId})'><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></a>
                                    @*<a class="popupCommentEdit" data-content='@Url.Action("CommentEdit", "Articles")?id=@item.Id&articleId=@item.ArticleId' data-id="@item.Id" data-art="@artId" href="#commentaryEditing-@item.Id"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></a>*@
                                    <a class="popupCommentDelete" data-id="@item.Id" data-art="@artId" href="#test-modal"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>
                                </div>
                            }
                        </div>
                        <div class="readyCommentBody" style="width: 100%; text-align: justify">
                            @Html.Raw(WebUtility.HtmlDecode(item.Body))
                        </div>
                    </div>

                    <div id="test-modal" class="mfp-hide white-popup">
                        <p>Potwierdź</p>
                        <hr />
                        <p>Czy na bank chcesz usunąć swój komentarz?</p>
                        <button type="button" class="btn btn-danger .btn-sm btnConfirmDeletion" id="commId">
                            Ta!
                        </button>
                        <button type="button" class="btn btn-info .btn-sm btnCancelDeletion">Nope!</button>
                    </div>

                    @*<div id="commentaryEditing-@item.Id" class="mfp-hide white-popup widerPopup">
                        <p>Edytuj komentarz</p>
                        <hr />
                        <div class="dupa"></div>
                        @Html.Action("CommentEdit", "Articles", new {id = item.Id, artId = item.ArticleId})
                        
                    </div>*@
                </div>
            }
        }
    </div>
</div>
@*href='@Url.Action("CommentEdit", "Articles", new { id = item.Id, artId = item.ArticleId })'*@
<script>
    jQuery(document).ready(function ($) {
        var comIdentificator;
        var artIdentificator;
        $('.articleEditorTextArea').trumbowyg();

        //For deleting single comment
        $('.popupCommentDelete').magnificPopup({
            type: 'inline',
            preloader: false,
            modal: true
        });
        $('.popupCommentDelete').click(function () {
            comIdentificator = $(this).data('id').toString();
            artIdentificator = $(this).data('art').toString();
        });
        $(document).on('click', '.btnConfirmDeletion', function (e) {
            $.ajax({
                url: '@Url.Action("DeleteComment", "Articles")',
                type: "POST",
                data: { 'commentId': comIdentificator, 'articleId': artIdentificator }
            })
                .done(function (partialViewResult) {
                    $.magnificPopup.close();
                    $("#detailsCommentSection").html(partialViewResult);
                });
        });
        $(document).on('click', '.btnCancelDeletion', function (e) {
            e.preventDefault();
            $.magnificPopup.close();
        });

        //For editing single comment
        @*$('.popupCommentEdit').magnificPopup({
            type: 'inline',
            preloader: false,
            modal: true
        });
        $('.popupCommentEdit').click(function () {
            comIdentificator = $(this).data('id').toString();
            artIdentificator = $(this).data('art').toString();
            @*$('.dupa').html(data)('@Html.Action("CommentEdit", "Articles")/id=' + comIdentificator + 'artId=' + artIdentificator);*@
            @*var partialEdit = $(this).data('content');
            console.log(partialEdit);

            var url = partialEdit;

            $.ajax({
                url: url,
                method: 'GET',
                success: function(data) {
                    $('.dupa').html(data);
                }
            });
            $.ajax({
                url: url,
                data: {}, //parameters go here in object literal form
                type: 'GET',
                datatype: 'json',
                success: function (data) {
                    $('.dupa').html(data);
                },
                error: function () { alert('something bad happened'); }
            });*@
        $(document).on('click', '.submitEditCommentForm', function (e) {
            e.preventDefault();
            $(".test-modal-edit > form").submit();
            $.magnificPopup.close();
            location.reload();
        });

        //Helper for adding new comment
        @*$('.addCommentButton').click(function () {
            var articleIdentificator = $('.commentAddFormArtId').val();
            $("form").submit();
            window.location.href = '@Url.Action("Details", "Articles")/' + articleIdentificator;
        });*@
    });
</script>
<style>
    .white-popup {
        position: relative;
        background: #FFF;
        padding: 40px;
        width: auto;
        max-width: 400px;
        margin: 20px auto;
        text-align: center;
    }

    .widerPopup {
        max-width: 650px !important;
    }
</style>